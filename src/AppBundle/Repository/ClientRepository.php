<?php

namespace AppBundle\Repository;

/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends \Doctrine\ORM\EntityRepository
{
	public function notContacted( $stat = 0, $start = 1, $max_results = 10 , array $criteria = null)
    {
		$mois = 1;
		if(isset($criteria['mois'])) $mois = $criteria['mois'];
        $parameters = array();
		//Owners deleted
		$qb1  = $this->createQueryBuilder('o1');
		$qb1->select('o1.id')
			->where("o.name = 'Supprimé'");
		
		//From agendaid
		$qb2  = $this->createQueryBuilder('c1');
		$qb2->select('c1.id')
			->leftJoin('c1.agendas', 'a1')
			->where($qb2->expr()->isNotNull('a1.timestampStart').' AND :filterdate < a1.timestampStart ')
			->andwhere("a1.actif = 'Y'");
		//From phone
		$qb3 = $this->createQueryBuilder('c2');
		$qb3->select('c2.id')
			->leftJoin('c2.phones', 'p2')
			->where($qb2->expr()->isNotNull('p2.start').' AND :filterdate < p2.start ')
			->andwhere("p2.actif = 'Y'");
		
		
		$queryBuilder = $this->createQueryBuilder('c');
		$queryBuilder->select('c.id');
		$queryBuilder->addselect('c.ident');
		$queryBuilder->addselect('c.name as clientname');
		$queryBuilder->addselect('co.firstname');
		$queryBuilder->addselect('co.lastname');
		$queryBuilder->addselect('c.mainAddress');
		$queryBuilder->addselect('c.tel');
		$queryBuilder->addselect('c.mobile');
		$queryBuilder->addselect('c.email');
		$queryBuilder->addselect('c.thirdid');
		$queryBuilder->addselect('c.clienturl');
		$queryBuilder->addselect('o.forename as ownerforename');
		$queryBuilder->addselect('o.name as ownername');
		$queryBuilder->addselect('o.id as ownerid');
		
		$queryBuilder->leftJoin('c.phones', 'p');
		$queryBuilder->leftJoin('c.agendas', 'a');
		$queryBuilder->leftJoin('c.contact', 'co');
		$queryBuilder->leftJoin('c.owner', 'o');
		
		$queryBuilder->where("c.actif = 'Y'");
		$queryBuilder->andwhere("c.type = 'corporation'");
		$queryBuilder->andwhere($queryBuilder->expr()->notIn('c.id', $qb2->getDQL()));
		$queryBuilder->andwhere($queryBuilder->expr()->notIn('c.id', $qb3->getDQL()));
		//$parameters['now'] = mktime(0, 0, 0, date("m"), date("d"),   date("Y"));
		$parameters['filterdate'] = mktime(0, 0, 0, date("m")- (int) $mois, date("d"),   date("Y"));
		
		if(isset($criteria['owner'])){
			if($criteria['owner'] != "S"){
				$queryBuilder->andWhere('o.id = :owner');
				$parameters['owner'] = (int) $criteria['owner'];
			}else{
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', $qb1->getDQL()));
			}
		}
		
		//filtre plusieurs owners rm 34571
		if(isset($criteria['owners']) && count($criteria['owners'])>0){
			$ownersId = array();
			foreach($criteria['owners'] as $owners)
			{
				$ownersId[] = $owners;
			}
			//Afficher les conseilles supprimés rm 34571
			if(isset($criteria['showdelete']) && $criteria['showdelete'] == 1){
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', join(',',$ownersId)).' OR '.$queryBuilder->expr()->In('o.id', $qb1->getDQL()));
			} else {
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', join(',',$ownersId)));
			}
		}
		
		
		if(isset($criteria['search']['value']) && $criteria['search']['value'] != ''){
			$queryBuilder->andWhere('c.name LIKE :expr OR c.thirdid LIKE :expr OR c.ident LIKE :expr OR c.name LIKE :expr OR c.mainAddress LIKE :expr OR c.email LIKE :expr OR o.name LIKE :expr OR o.forename LIKE :expr OR c.tel LIKE :expr OR c.mobile LIKE :expr');
			$parameters['expr'] = '%'.$criteria['search']['value'].'%';
		} 
		
		if(isset($criteria['order'][0])){
			if($criteria['order'][0]['column'] == 0){
				$queryBuilder->orderBy('c.thirdid', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 1){
				$queryBuilder->orderBy('c.name', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 2){
				$queryBuilder->orderBy('c.ident', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 3){
				$queryBuilder->orderBy('c.mainAddress', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 4){
				$queryBuilder->orderBy('c.email', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 5){
				$queryBuilder->orderBy('c.tel', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 6){
				$queryBuilder->orderBy('c.mobile', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 7){
				$queryBuilder->orderBy('o.name', $criteria['order'][0]['dir']);
			}
		}
		
		
		if(count($parameters)>0){
			$queryBuilder->setParameters($parameters);
		}
		$queryBuilder->distinct();
		$queryBuilder->groupBy('c.id');
		$query = $queryBuilder->getQuery();
		//echo  $sql=$query->getSQL(); 
		//echo  dump($query->getParameters()); 
		//die('');
		$total =  $queryBuilder->getQuery()->getArrayResult();
		if($stat == 0){
			$queryBuilder->setFirstResult($start)->setMaxResults($max_results) ;
		}
		
		return ['total' => count($total) , 'result' => $queryBuilder ->getQuery()->getArrayResult()];
    }
	
	public function withRdv( $stat = 0, $start = 1, $max_results = 10 , array $criteria = null)
    {
		$mois = 1;
		if(isset($criteria['mois'])) $mois = $criteria['mois'];
        $parameters = array();
		//Owners deleted
		$qb1  = $this->createQueryBuilder('o1');
		$qb1->select('o1.id')
			->where("o.name = 'Supprimé'");
			
		//Agenda > Labelid
		//RDV de suivi téléphonique 2619785
		//RDV 1ere Perso 2725096
		//RDV en cabinet 2795944
		$qb2  = $this->createQueryBuilder('c1');
		$qb2->select('c1.id')
			->leftJoin('c1.agendas', 'a1')
			->leftJoin('a1.agendatype', 'at')
			->where($qb2->expr()->In('at.labelid','2619785,2725096,2795944'))
			->andwhere(':datemin <= a1.timestampStart  OR :datemin <= a1.timestampEnd ')
			->andwhere("a1.actif = 'Y'");
			
		//Phone calltypid
		//RDV de suivi 2659060
		//RDV de 1ere perso 2659059

		$qb3 = $this->createQueryBuilder('c2');
		$qb3->select('c2.id')
			->leftJoin('c2.phones', 'p2')
			->leftJoin('p2.phonetype', 'pt')
			->where($qb3->expr()->In('pt.calltypeid','2659060,2659059'))
			->andwhere(' :datemin <= p2.start ')
			->andwhere("p2.actif = 'Y'");
		
		
		$queryBuilder = $this->createQueryBuilder('c');
		$queryBuilder->select('c.id');
		$queryBuilder->addselect('c.ident');
		$queryBuilder->addselect('c.name as clientname');
		$queryBuilder->addselect('co.firstname');
		$queryBuilder->addselect('co.lastname');
		$queryBuilder->addselect('c.mainAddress');
		$queryBuilder->addselect('c.tel');
		$queryBuilder->addselect('c.mobile');
		$queryBuilder->addselect('c.email');
		$queryBuilder->addselect('c.thirdid');
		$queryBuilder->addselect('c.clienturl');
		$queryBuilder->addselect('o.forename as ownerforename');
		$queryBuilder->addselect('o.name as ownername');
		$queryBuilder->addselect('o.id as ownerid');
		
		//$queryBuilder->leftJoin('c.phones', 'p');
		//$queryBuilder->leftJoin('c.agendas', 'a');
		$queryBuilder->leftJoin('c.contact', 'co');
		$queryBuilder->leftJoin('c.owner', 'o');
		
		$queryBuilder->where("c.actif = 'Y'");
		$queryBuilder->andwhere("c.type = 'corporation'");
		$queryBuilder->andwhere($queryBuilder->expr()->In('c.id', $qb2->getDQL()));
		$queryBuilder->orwhere($queryBuilder->expr()->In('c.id', $qb3->getDQL()));
		//$parameters['now'] = mktime(0, 0, 0, date("m"), date("d"),   date("Y"));
		$parameters['datemin'] = mktime(0, 0, 0, date("m")- (int) $mois, date("d"),   date("Y"));
		//$parameters['datemax'] = mktime(0, 0, 0, date("m")+ (int) $mois, date("d"),   date("Y"));
		
		
		if(isset($criteria['owner'])){
			if($criteria['owner'] != "S"){
				$queryBuilder->andWhere('o.id = :owner');
				$parameters['owner'] = (int) $criteria['owner'];
			}else{
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', $qb1->getDQL()));
			}
		} 
		
		//filtre plusieurs owners rm 34571
		if(isset($criteria['owners']) && count($criteria['owners'])>0){
			$ownersId = array();
			foreach($criteria['owners'] as $owners)
			{
				$ownersId[] = $owners;
			}
			//Afficher les conseilles supprimés rm 34571
			if(isset($criteria['showdelete']) && $criteria['showdelete'] == 1){
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', join(',',$ownersId)).' OR '.$queryBuilder->expr()->In('o.id', $qb1->getDQL()));
			} else {
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', join(',',$ownersId)));
			}
		}
		
		if(isset($criteria['search']['value']) && $criteria['search']['value'] !=''){
			$queryBuilder->andWhere('c.name LIKE :expr OR c.thirdid LIKE :expr OR c.ident LIKE :expr OR c.name LIKE :expr OR c.mainAddress LIKE :expr OR c.email LIKE :expr OR o.name LIKE :expr OR o.forename LIKE :expr OR c.tel LIKE :expr OR c.mobile LIKE :expr');
			$parameters['expr'] = '%'.$criteria['search']['value'].'%';
		} 
		
		if(isset($criteria['order'][0])){
			if($criteria['order'][0]['column'] == 0){
				$queryBuilder->orderBy('c.thirdid', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 1){
				$queryBuilder->orderBy('c.name', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 2){
				$queryBuilder->orderBy('c.ident', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 3){
				$queryBuilder->orderBy('c.mainAddress', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 4){
				$queryBuilder->orderBy('c.email', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 5){
				$queryBuilder->orderBy('c.tel', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 6){
				$queryBuilder->orderBy('c.mobile', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 7){
				$queryBuilder->orderBy('o.name', $criteria['order'][0]['dir']);
			}
		}
		
		
		if(count($parameters)>0){
			$queryBuilder->setParameters($parameters);
		}
		$queryBuilder->distinct();
		$queryBuilder->groupBy('c.id');
		$query=$queryBuilder->getQuery();

		$total =  $queryBuilder->getQuery()->getArrayResult();
		if($stat == 0){
			$queryBuilder->setFirstResult($start)->setMaxResults($max_results) ;
		}
		
		return ['total' => count($total) , 'result' => $queryBuilder ->getQuery()->getArrayResult()];
    }
	
	public function withoutRdv( $stat = 0, $start = 1, $max_results = 10 , array $criteria = null)
    {
		$mois = 1;
		if(isset($criteria['mois'])) $mois = $criteria['mois'];
        $parameters = array();
		//Owners deleted
		$qb1  = $this->createQueryBuilder('o1');
		$qb1->select('o1.id')
			->where("o.name = 'Supprimé'");
			
		//Agenda > Labelid
		//RDV de suivi téléphonique 2619785
		//RDV 1ere Perso 2725096
		//RDV en cabinet 2795944
		$qb2  = $this->createQueryBuilder('c1');
		$qb2->select('c1.id')
			->leftJoin('c1.agendas', 'a1')
			->leftJoin('a1.agendatype', 'at')
			->where(' :datemin <= a1.timestampStart  OR :datemin <= a1.timestampEnd ')
			->andwhere($qb2->expr()->In('at.labelid','2619785,2725096,2795944'))
			->andwhere("a1.actif = 'Y'");
			
		//Phone calltypid
		//RDV de suivi 2659060
		//RDV de 1ere perso 2659059

		$qb3 = $this->createQueryBuilder('c2');
		$qb3->select('c2.id')
			->leftJoin('c2.phones', 'p2')
			->leftJoin('p2.phonetype', 'pt')
			->where(' :datemin <= p2.start ')
			->andwhere($qb3->expr()->In('pt.calltypeid','2659060,2659059'))
			->andwhere("p2.actif = 'Y'");
		
		$queryBuilder = $this->createQueryBuilder('c');
		$queryBuilder->select('c.id');
		$queryBuilder->addselect('c.ident');
		$queryBuilder->addselect('c.name as clientname');
		$queryBuilder->addselect('co.firstname');
		$queryBuilder->addselect('co.lastname');
		$queryBuilder->addselect('c.mainAddress');
		$queryBuilder->addselect('c.tel');
		$queryBuilder->addselect('c.mobile');
		$queryBuilder->addselect('c.email');
		$queryBuilder->addselect('c.thirdid');
		$queryBuilder->addselect('c.clienturl');
		$queryBuilder->addselect('o.forename as ownerforename');
		$queryBuilder->addselect('o.name as ownername');
		$queryBuilder->addselect('o.id as ownerid');
		
		$queryBuilder->leftJoin('c.phones', 'p');
		$queryBuilder->leftJoin('c.agendas', 'a');
		$queryBuilder->leftJoin('c.contact', 'co');
		$queryBuilder->leftJoin('c.owner', 'o');
		
		$queryBuilder->where("c.actif = 'Y'");
		$queryBuilder->andwhere("c.type = 'corporation'");
		$queryBuilder->andwhere($queryBuilder->expr()->notIn('c.id', $qb2->getDQL()));
		$queryBuilder->andwhere($queryBuilder->expr()->notIn('c.id', $qb3->getDQL()));
		//$parameters['now'] = mktime(0, 0, 0, date("m"), date("d"),   date("Y"));
		$parameters['datemin'] = mktime(0, 0, 0, date("m")- (int) $mois, date("d"),   date("Y"));
		//$parameters['datemax'] = mktime(0, 0, 0, date("m")+ (int) $mois, date("d"),   date("Y"));
		
		
		if(isset($criteria['owner'])){
			if($criteria['owner'] != "S"){
				$queryBuilder->andWhere('o.id = :owner');
				$parameters['owner'] = (int) $criteria['owner'];
			}else{
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', $qb1->getDQL()));
			}
		} 
		
		//filtre plusieurs owners rm 34571
		if(isset($criteria['owners']) && count($criteria['owners'])>0){
			$ownersId = array();
			foreach($criteria['owners'] as $owners)
			{
				$ownersId[] = $owners;
			}
			//Afficher les conseilles supprimés rm 34571
			if(isset($criteria['showdelete']) && $criteria['showdelete'] == 1){
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', join(',',$ownersId)).' OR '.$queryBuilder->expr()->In('o.id', $qb1->getDQL()));
			} else {
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', join(',',$ownersId)));
			}
		}
		
		if(isset($criteria['search']['value']) && $criteria['search']['value'] != ''){
			$queryBuilder->andWhere('c.name LIKE :expr OR c.thirdid LIKE :expr OR c.ident LIKE :expr OR c.name LIKE :expr  OR c.mainAddress LIKE :expr OR c.email LIKE :expr OR o.name LIKE :expr OR o.forename LIKE :expr OR c.tel LIKE :expr OR c.mobile LIKE :expr');
			$parameters['expr'] = '%'.$criteria['search']['value'].'%';
		} 
		
		if(isset($criteria['order'][0])){
			if($criteria['order'][0]['column'] == 0){
				$queryBuilder->orderBy('c.thirdid', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 1){
				$queryBuilder->orderBy('c.name', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 2){
				$queryBuilder->orderBy('c.ident', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 3){
				$queryBuilder->orderBy('c.mainAddress', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 4){
				$queryBuilder->orderBy('c.email', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 5){
				$queryBuilder->orderBy('c.tel', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 6){
				$queryBuilder->orderBy('c.mobile', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 7){
				$queryBuilder->orderBy('o.name', $criteria['order'][0]['dir']);
			}
		}
		
		
		if(count($parameters)>0){
			$queryBuilder->setParameters($parameters);
		}
		$queryBuilder->distinct();
		$queryBuilder->groupBy('c.id');
		//$query = $queryBuilder->getQuery();
		//echo  $sql=$query->getSQL(); 
		//echo  dump($query->getParameters()); 
		//die('');
		
		$total =  $queryBuilder->getQuery()->getArrayResult();
		if($stat == 0){
			$queryBuilder->setFirstResult($start)->setMaxResults($max_results) ;
		}
		
		return ['total' => count($total) , 'result' => $queryBuilder ->getQuery()->getArrayResult()];
    }
	
	public function suivi( $stat = 0, $start = 1, $max_results = 10 , array $criteria = null)
    {
		$mois = 1;
		if(isset($criteria['mois'])) $mois = $criteria['mois'];
        $parameters = array();
		//Owners deleted
		$qb1  = $this->createQueryBuilder('o1');
		$qb1->select('o1.id')
			->where("o.name = 'Supprimé'");
			
		//Agenda > Labelid
		//RDV de suivi téléphonique 2619785
		//RDV 1ere Perso 2725096
		//RDV en cabinet 2795944
		$qb2  = $this->createQueryBuilder('c1');
		$qb2->select('c1.id')
			->leftJoin('c1.agendas', 'a1')
			->leftJoin('a1.agendatype', 'at')
			->where(' :datemin <= a1.timestampStart  OR :datemin <= a1.timestampEnd')
			->andwhere($qb2->expr()->In('at.labelid','2619785,2725096,2795944'))
			->andwhere("a1.actif = 'Y'");
			
		//Phone calltypid
		//2702636 Administratif
		//2797410 Modifications simples [Site]
		//2797411 Modifications simples [TV]
		//2797412 Référencement
		//2797413 Newsletter / Emailing
		//2797414 Mise en ligne
		//2797415 Espace Pro (identifiants, bug...)
		//2797416 Refonte / Design / Version mobile
		//2797417 Contenus [Site]
		//2797418 Contenus [TV]
		//2797419 Fonctionnalités [Site]
		//2797420 Prise de RDV en ligne
		//2797421 E-reputation
		//2797422 Migration
		//2797423 Bug - TV
		//2797424 Bug - Site
		//2801538 Report RDV
		//2801826 RGPD

		$qb3 = $this->createQueryBuilder('c2');
		$qb3->select('c2.id')
			->leftJoin('c2.phones', 'p2')
			->leftJoin('p2.phonetype', 'pt')
			->where(' :datemin <= p2.start ')
			->andwhere($qb3->expr()->In('pt.calltypeid','2702636,2797410,2797411,2797412,2797413,2797414,2797415,2797416,2797417,2797418,2797419,2797420,2797421,2797422,2797423,2797424,2801826,2801538'))
			->andwhere("p2.actif = 'Y'");
		
		//Phone calltypid
		//RDV de suivi 2659060
		//RDV de 1ere perso 2659059

		$qb4 = $this->createQueryBuilder('c3');
		$qb4->select('c3.id')
			->leftJoin('c3.phones', 'p3')
			->leftJoin('p3.phonetype', 'pt3')
			->where(' :datemin <= p3.start ')
			->andwhere($qb4->expr()->In('pt3.calltypeid','2659060,2659059'))
			->andwhere("p3.actif = 'Y'");
		
		$queryBuilder = $this->createQueryBuilder('c');
		$queryBuilder->select('c.id');
		$queryBuilder->addselect('c.ident');
		$queryBuilder->addselect('c.name as clientname');
		$queryBuilder->addselect('co.firstname');
		$queryBuilder->addselect('co.lastname');
		$queryBuilder->addselect('c.mainAddress');
		$queryBuilder->addselect('c.tel');
		$queryBuilder->addselect('c.mobile');
		$queryBuilder->addselect('c.email');
		$queryBuilder->addselect('c.thirdid');
		$queryBuilder->addselect('c.clienturl');
		$queryBuilder->addselect('o.forename as ownerforename');
		$queryBuilder->addselect('o.name as ownername');
		$queryBuilder->addselect('o.id as ownerid');
		
		$queryBuilder->leftJoin('c.phones', 'p');
		$queryBuilder->leftJoin('c.agendas', 'a');
		$queryBuilder->leftJoin('c.contact', 'co');
		$queryBuilder->leftJoin('c.owner', 'o');
		
		$queryBuilder->where("c.actif = 'Y'");
		$queryBuilder->andwhere("c.type = 'corporation'");
		//$queryBuilder->andwhere($queryBuilder->expr()->notIn('c.id', $qb2->getDQL()));
		//$queryBuilder->andwhere($queryBuilder->expr()->In('c.id', $qb3->getDQL()));//rm 33913
		$queryBuilder->andwhere($queryBuilder->expr()->In('c.id', $qb3->getDQL()).' OR '.$queryBuilder->expr()->In('c.id', $qb2->getDQL()).' OR '.$queryBuilder->expr()->In('c.id', $qb4->getDQL()));
		//$queryBuilder->andwhere($queryBuilder->expr()->notIn('c.id', $qb4->getDQL()));
		//$parameters['now'] = mktime(0, 0, 0, date("m"), date("d"),   date("Y"));
		$parameters['datemin'] = mktime(0, 0, 0, date("m")- (int) $mois, date("d"),   date("Y"));
		//$parameters['datemax'] = mktime(0, 0, 0, date("m")+ (int) $mois, date("d"),   date("Y"));
		
		
		if(isset($criteria['owner'])){
			if($criteria['owner'] != "S"){
				$queryBuilder->andWhere('o.id = :owner');
				$parameters['owner'] = (int) $criteria['owner'];
			}else{
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', $qb1->getDQL()));
			}
		} 
		
		//filtre plusieurs owners rm 34571
		if(isset($criteria['owners']) && count($criteria['owners'])>0){
			$ownersId = array();
			foreach($criteria['owners'] as $owners)
			{
				$ownersId[] = $owners;
			}
			//Afficher les conseilles supprimés rm 34571
			if(isset($criteria['showdelete']) && $criteria['showdelete'] == 1){
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', join(',',$ownersId)).' OR '.$queryBuilder->expr()->In('o.id', $qb1->getDQL()));
			} else {
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', join(',',$ownersId)));
			}
		}
		
		if(isset($criteria['search']['value']) && $criteria['search']['value'] != ''){
			$queryBuilder->andWhere('c.name LIKE :expr OR c.thirdid LIKE :expr OR c.ident LIKE :expr OR c.name LIKE :expr OR c.mainAddress LIKE :expr OR c.email LIKE :expr OR o.name LIKE :expr OR o.forename LIKE :expr OR c.tel LIKE :expr OR c.mobile LIKE :expr');
			$parameters['expr'] = '%'.$criteria['search']['value'].'%';
		} 
		
		if(isset($criteria['order'][0])){
			if($criteria['order'][0]['column'] == 0){
				$queryBuilder->orderBy('c.thirdid', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 1){
				$queryBuilder->orderBy('c.name', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 2){
				$queryBuilder->orderBy('c.ident', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 3){
				$queryBuilder->orderBy('c.mainAddress', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 4){
				$queryBuilder->orderBy('c.email', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 5){
				$queryBuilder->orderBy('c.tel', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 6){
				$queryBuilder->orderBy('c.mobile', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 7){
				$queryBuilder->orderBy('o.name', $criteria['order'][0]['dir']);
			}
		}
		
		
		if(count($parameters)>0){
			$queryBuilder->setParameters($parameters);
		}
		$queryBuilder->distinct();
		$queryBuilder->groupBy('c.id');
		
		//$query = $queryBuilder->getQuery();
		//echo  $sql=$query->getSQL(); 
		//echo  dump($query->getParameters()); 
		//die('');
		
		$total =  $queryBuilder->getQuery()->getArrayResult();
		if($stat == 0){
			$queryBuilder->setFirstResult($start)->setMaxResults($max_results) ;
		}
		
		return ['total' => count($total) , 'result' => $queryBuilder ->getQuery()->getArrayResult()];
    }
	
	public function relance( $stat = 0, $start = 1, $max_results = 10 , array $criteria = null)
    {
		$mois = 1;
		if(isset($criteria['mois'])) $mois = $criteria['mois'];
        $parameters = array();
		//Owners deleted
		$qb1  = $this->createQueryBuilder('o1');
		$qb1->select('o1.id')
			->where("o.name = 'Supprimé'");
			
		//Agenda > Labelid
		//RDV de suivi téléphonique 2619785
		//RDV 1ere Perso 2725096
		//RDV en cabinet 2795944
		$qb2  = $this->createQueryBuilder('c1');
		$qb2->select('c1.id')
			->leftJoin('c1.agendas', 'a1')
			->leftJoin('a1.agendatype', 'at')
			//->where(' (:datemin <= a1.timestampStart AND a1.timestampStart <= :now) OR ( :now <= a1.timestampStart AND a1.timestampStart <= :datemax)')
			->where(' :datemin <= a1.timestampStart OR :datemin <= a1.timestampEnd')
			->andwhere($qb2->expr()->In('at.labelid','2619785,2725096,2795944'))
			->andwhere("a1.actif = 'Y'");
			
		//Phone calltypid
		//2702634 Relance RDV

		$qb3 = $this->createQueryBuilder('c2');
		$qb3->select('c2.id')
			->leftJoin('c2.phones', 'p2')
			->leftJoin('p2.phonetype', 'pt')
			->where(' :datemin <= p2.start  ')
			->andwhere($qb3->expr()->In('pt.calltypeid','2702634'))
			->andwhere("p2.actif = 'Y'");
		
		//Phone calltypid
		//RDV de suivi 2659060
		//RDV de 1ere perso 2659059

		$qb4 = $this->createQueryBuilder('c3');
		$qb4->select('c3.id')
			->leftJoin('c3.phones', 'p3')
			->leftJoin('p3.phonetype', 'pt3')
			->where(' :datemin <= p3.start ')
			//->andwhere($qb4->expr()->In('pt3.calltypeid','2659060,2659059'))
			->andwhere($qb4->expr()->notIn('pt3.calltypeid','2702634')) //redmine 34491 à vérifier
			->andwhere("p3.actif = 'Y'");
		
		$queryBuilder = $this->createQueryBuilder('c');
		$queryBuilder->select('c.id');
		$queryBuilder->addselect('c.ident');
		$queryBuilder->addselect('c.name as clientname');
		$queryBuilder->addselect('co.firstname');
		$queryBuilder->addselect('co.lastname');
		$queryBuilder->addselect('c.mainAddress');
		$queryBuilder->addselect('c.tel');
		$queryBuilder->addselect('c.mobile');
		$queryBuilder->addselect('c.email');
		$queryBuilder->addselect('c.thirdid');
		$queryBuilder->addselect('c.clienturl');
		$queryBuilder->addselect('o.forename as ownerforename');
		$queryBuilder->addselect('o.name as ownername');
		$queryBuilder->addselect('o.id as ownerid');
		
		$queryBuilder->leftJoin('c.phones', 'p');
		$queryBuilder->leftJoin('c.agendas', 'a');
		$queryBuilder->leftJoin('c.contact', 'co');
		$queryBuilder->leftJoin('c.owner', 'o');
		
		$queryBuilder->where("c.actif = 'Y'");
		$queryBuilder->andwhere("c.type = 'corporation'");
		$queryBuilder->andwhere($queryBuilder->expr()->notIn('c.id', $qb2->getDQL()));
		$queryBuilder->andwhere($queryBuilder->expr()->In('c.id', $qb3->getDQL()));
		$queryBuilder->andwhere($queryBuilder->expr()->notIn('c.id', $qb4->getDQL()));
		//$parameters['now'] = mktime(0, 0, 0, date("m"), date("d"),   date("Y"));
		$parameters['datemin'] = mktime(0, 0, 0, date("m")- (int) $mois, date("d"),   date("Y"));
		//$parameters['datemax'] = mktime(0, 0, 0, date("m")+ (int) $mois, date("d"),   date("Y"));
		
		
		if(isset($criteria['owner'])){
			if($criteria['owner'] != "S"){
				$queryBuilder->andWhere('o.id = :owner');
				$parameters['owner'] = (int) $criteria['owner'];
			}else{
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', $qb1->getDQL()));
			}
		} 
		
		//filtre plusieurs owners rm 34571
		if(isset($criteria['owners']) && count($criteria['owners'])>0){
			$ownersId = array();
			foreach($criteria['owners'] as $owners)
			{
				$ownersId[] = $owners;
			}
			//Afficher les conseilles supprimés rm 34571
			if(isset($criteria['showdelete']) && $criteria['showdelete'] == 1){
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', join(',',$ownersId)).' OR '.$queryBuilder->expr()->In('o.id', $qb1->getDQL()));
			} else {
				$queryBuilder->andWhere($queryBuilder->expr()->In('o.id', join(',',$ownersId)));
			}
		}
		
		if(isset($criteria['search']['value']) && $criteria['search']['value'] != ''){
			$queryBuilder->andWhere('c.name LIKE :expr OR c.thirdid LIKE :expr OR c.ident LIKE :expr OR c.name LIKE :expr OR c.mainAddress LIKE :expr OR c.email LIKE :expr OR o.name LIKE :expr OR o.forename LIKE :expr OR c.tel LIKE :expr OR c.mobile LIKE :expr');
			$parameters['expr'] = '%'.$criteria['search']['value'].'%';
		} 
		
		if(isset($criteria['order'][0])){
			if($criteria['order'][0]['column'] == 0){
				$queryBuilder->orderBy('c.thirdid', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 1){
				$queryBuilder->orderBy('c.name', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 2){
				$queryBuilder->orderBy('c.ident', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 3){
				$queryBuilder->orderBy('c.mainAddress', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 4){
				$queryBuilder->orderBy('c.email', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 5){
				$queryBuilder->orderBy('c.tel', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 6){
				$queryBuilder->orderBy('c.mobile', $criteria['order'][0]['dir']);
			}
			if($criteria['order'][0]['column'] == 7){
				$queryBuilder->orderBy('o.name', $criteria['order'][0]['dir']);
			}
		}
		
		
		if(count($parameters)>0){
			$queryBuilder->setParameters($parameters);
		}
		$queryBuilder->distinct();
		$queryBuilder->groupBy('c.id');
		
		$total =  $queryBuilder->getQuery()->getArrayResult();
		if($stat == 0){
			$queryBuilder->setFirstResult($start)->setMaxResults($max_results) ;
		}
		
		return ['total' => count($total) , 'result' => $queryBuilder ->getQuery()->getArrayResult()];
    }
	
}
